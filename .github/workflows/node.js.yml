# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: test-build

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: pnpm/action-setup@v2
      with:
        version: 8.15.1
        cache: 'pnpm'
    - name: Install dependencies
      run: pnpm install
    - name: Lint
      run: pnpm run lint

  test-migrations:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: ubuntu:latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.1

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Running migrations
        # Runs migrations on a fresh DB table, this tests whether there are any issues with the migrations
        run: pnpm migrate
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8.15.1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - run: pnpm install
    - run: pnpm test
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: VITEST Tests            # Name of the check run which will be created
        path: reports/test-*.xml    # Path to test results
        reporter: jest-junit        # Format of test results

  migrate:
    runs-on: ubuntu-latest
    environment: Production
    needs: [lint, test, test-migrations]
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8.15.1
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
    - name: Install dependencies
      run: pnpm install
    - name: Running migrations in production
      run: pnpm migrate
      env:
        DATABASE_URL: '${{ secrets.DATABASE_URL }}'
    - name: Seeding production database for demo
      run: pnpm seed
      env:
        DATABASE_URL: '${{ secrets.DATABASE_URL }}'
